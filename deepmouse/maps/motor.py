"""
Motor cortex map from:

﻿[1] K. A. Tennant et al., “The Organization of the Forelimb Representation of the C57BL / 6 Mouse
Motor Cortex as Defined by Intracortical Microstimulation and Cytoarchitecture,” Cereb. Cortex,
vol. 21, pp. 865–876, 2011.

Maps are based on movements generated at lowest stimulation threshold.

Electode was placed at 790-800 micrometer depth. The authors say this corresponds to layer 5, but
they don't mention accounting for curvature. In anterolateral MOp the entire depth would be in
superficial layers. Consistent with this, stimulations in this area didn't elicit movements.
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.colors import to_rgb
from deepmouse.maps.util import get_voxel_model_cache, get_positions

#TODO: map onto muscles via patches
#TODO: include MOs
#TODO: include overlap area in both primary somatosensory and motor maps

class VoxelMotorRepresentation:
    def __init__(self):
        self._cache = get_voxel_model_cache()
        structure_tree = self._cache.get_structure_tree()

        id = structure_tree.get_id_acronym_map()['MOp']
        self._positions = get_positions(self._cache, id)

        layer_5_id = structure_tree.get_id_acronym_map()['MOp5']
        self._layer_5_positions = get_positions(self._cache, layer_5_id)

        self.aggregate = AggregateMap()

    def get_motor_representation(self, voxel_position):
        """
        :param voxel_position: TODO
        :return: vector with strength of representation of different body parts,
            specifically MotorMap.parts.keys()
        """

        """
        To account for cortical curvature, we first find the closest L5 voxel, and then 
        look up the motor representation for the horizontal location of the L5 voxel. 
        This should give entire columns the same motor representation.

        Note in this atlas: http://www.mbl.org/atlas170/atlas170_frame.html
        - the first section (front of olfactory bulb) is 4.74mm anterior to bregma (2nd 4.64)
        - last section is bregma - 7.70mm (2nd last -7.48)
        - distance between these is 4.64+7.70 = 12.34mm
        - bregma is 37.6% back 

        Voxel spacing is 100 microns, so total Allen AP dimension is 131-3=128=voxels=12.8mm.
        Matching with other atlas, bregma is at voxel 3+128*.376=51.128. Result (with rounding): 
        bregma is at voxel 51 (AP), 56.5 (ML)
        """

        offsets = voxel_position - self._layer_5_positions
        distances = np.linalg.norm(offsets, axis=1)
        index = np.argmin(distances)
        layer_5_position = self._layer_5_positions[index,:] # back, down, lateral
        lateral_from_bregma_mm = - (layer_5_position[2] - 56.5) / 10 # -ve because paper reports left hemisphere and we have right
        posterior_from_bregma_mm = (layer_5_position[0] - 51) / 10
        # print('position: ({},{})'.format(posterior_from_bregma_mm, lateral_from_bregma_mm))
        return self.aggregate.map_point((posterior_from_bregma_mm, lateral_from_bregma_mm))

    def _in_area(self, voxel_position):
        pass #TODO

    def plot(self):
        source_mask = self._cache.get_source_mask()
        source_keys = source_mask.get_key(structure_ids=None)
        source_key_volume = source_mask.map_masked_to_annotation(source_keys)

        voxels = source_key_volume < 0 #all False
        voxels[self._positions[:,0], self._positions[:,1], self._positions[:,2]] = True

        colors = np.empty(voxels.shape, dtype=object)
        for i in range(self._positions.shape[0]):
            r = self.get_motor_representation(self._positions[i,:])
            c = self.aggregate.get_color(r)
            colors[self._positions[i][0], self._positions[i][1], self._positions[i][2]] = c

        fig = plt.figure(figsize=(4,3))
        ax = fig.add_subplot(111, projection='3d')
        ax.voxels(voxels, facecolors=colors, edgecolor='k')
        ax.set_xlabel('back')
        ax.set_ylabel('down')
        ax.set_zlabel('lateral')
        ax.set_xlim((min(self._positions[:,0]), max(self._positions[:,0])))
        ax.set_ylim((min(self._positions[:,1]), max(self._positions[:,1])))
        ax.set_zlim((min(self._positions[:,2]), max(self._positions[:,2])))
        ax.azim = -90
        ax.elev = -15
        ax.set_title('Motor Representation')
        plt.tight_layout()
        plt.show()


class AggregateMap:
    """
    Vector-valued map composed of several mouse maps from Tennant et al.
    """
    def __init__(self):
        self.maps = [MotorMap(i) for i in range(6)]
        self.parts = [key for key in self.maps[0].parts] #TODO: is this order guaranteed?

    def map_point(self, point):
        result = np.zeros(len(self.parts))
        for map in self.maps:
            part = map.map_point(point)
            if part:
                result[self.parts.index(part)] += 1/len(self.maps)
        return result

    def get_color(self, vector):
        rgb = np.zeros(3)
        for part, weight in zip(self.parts, vector):
            c = self.maps[0].display_colors[part]
            rgb += weight * np.array(to_rgb(c))
        return rgb


class MotorMap:
    def __init__(self, mouse_index):
        points = get_all_points(mouse_index)
        points = np.array(points) - np.array(bregmas[mouse_index])
        x_grid = get_grid_points(points[:, 0])
        y_grid = get_grid_points(points[:, 1])

        def get_coords(points):
            points = [point for point in points if get_mouse(point) == mouse_index]
            if points:
                points = np.array(points) - np.array(bregmas[mouse_index])
            return get_cortical_coords(points, x_grid=x_grid, y_grid=y_grid)

        self.parts = {
            'elbow': get_coords(elbow),
            'wrist': get_coords(wrist),
            'digit': get_coords(digit),
            'neck': get_coords(neck),
            'jaw': get_coords(jaw),
            'vibrissa': get_coords(vibrissa),
            'trunk': get_coords(trunk),
            'shoulder': get_coords(shoulder),
            'hindlimb': get_coords(hindlimb),
            'tail': get_coords(tail)
        }

        # roughly as in paper for easy comparison
        self.display_colors = {
            'elbow': 'xkcd:royal blue',
            'wrist': 'g',
            'digit': 'r',
            'neck': 'y',
            'jaw': 'xkcd:brown',
            'vibrissa': 'xkcd:faded pink',
            'trunk': 'xkcd:grey',
            'shoulder': 'xkcd:neon purple',
            'hindlimb': 'xkcd:sky blue',
            'tail': 'xkcd:tangerine',
            None: 'xkcd:white'
        }

        # find grid centres as unique coords over all points
        coords = np.array(get_coords(points + np.array(bregmas[mouse_index])))
        self.x_centres = np.unique(coords[:,0])
        self.y_centres = np.unique(coords[:,1])
        # print(self.x_centres)
        # print(self.y_centres)

        # build a map of body parts that can be indexed quickly
        self.grid = []
        for i in range(len(self.x_centres)):
            self.grid.append([None]*len(self.y_centres))

        for key in self.parts:
            for point in self.parts[key]:
                indices = self._get_indices(point)
                if indices is not None:
                    self.grid[indices[0]][indices[1]] = key

    def _get_indices(self, point):
        # return x, y grid indices
        x_index = int(np.rint((point[0] - self.x_centres[0]) / (self.x_centres[1] - self.x_centres[0])))
        y_index = int(np.rint((point[1] - self.y_centres[0]) / (self.y_centres[1] - self.y_centres[0])))
        if x_index < 0 or x_index >= len(self.x_centres) or y_index < 0 or y_index >= len(self.y_centres):
            return None
        else:
            return x_index, y_index

    def map_point(self, point):
        """
        :param point: point on dorsal cortical surface
        :return: key of corresponding body part in motor map (None if off map)
        """
        indices = self._get_indices(point)
        if indices:
            return self.grid[indices[0]][indices[1]]
        else:
            return None

    def show(self):
        def show_part(points, color):
            if len(points) > 0:
                plt.scatter(points[:, 0], points[:, 1], color=color)

        for key in self.parts:
            show_part(self.parts[key], self.display_colors[key])


def get_cortical_coords(points, x_grid=None, y_grid=None):
    """
    :param points: Noisy points in image coordinates (relative to bregma point in image).
    :return: Points converted to cortical coordinates, snapped to grid.
    """
    points = np.array(points)
    if x_grid is None:
        x_grid = get_grid_points(points[:,0])
    if y_grid is None:
        y_grid = get_grid_points(points[:,1])

    def closest(value, possibilities):
        differences = np.abs(np.array(possibilities) - value)
        return possibilities[np.argmin(differences)]

    for i in range(points.shape[0]):
        points[i,0] = closest(points[i,0], x_grid)
        points[i,1] = closest(points[i,1], y_grid)

    xp = np.mean([x_grid[i] - x_grid[i - 1] for i in range(1, len(x_grid))])
    yp = np.mean([y_grid[i] - y_grid[i - 1] for i in range(1, len(y_grid))])

    # electrode penetrations were in a 250 micrometer grid
    x_scale = .25 / xp
    y_scale = .25 / yp
    return np.array([[x_scale*point[0], y_scale*point[1]] for point in points])


def get_image_vertical_distance_per_mm():
    """
    :return: image coordinate distance per mm cortical surface
    """
    dist = [bregmas[i][1] - ml_15[i] for i in range(6)]
    return np.mean(dist)


def get_grid_points(points):
    """
    :param points: list of 1D points that fall approximately on a grid
    :return: list of unique evenly spaced grid points close to given points
    """
    # make smooth histogram-like signal
    (low, high) = (np.min(points), np.max(points))
    x = np.linspace(low-.1*(high-low), high+.1*(high-low), 1000)
    y = np.zeros_like(x)
    for point in points:
        y = y + np.exp(-(x-point)**2/2/.005**2)

    # find peaks
    peaks = []
    for i in range(1, len(x)-1):
        if y[i] > y[i-1] and y[i] > y[i+1]:
            peaks.append(x[i])

    # find period of peaks
    increments = [peaks[i] - peaks[i-1] for i in range(1,len(peaks))]
    m = np.mean(increments)
    sd = np.std(increments)
    increments = [increment for increment in increments if np.abs(increment-m) < 1.5*sd]
    period = np.mean(increments)

    # find evenly spaced grid points near peaks
    grid = np.arange(0, len(peaks)*period, period)
    return grid + np.mean(peaks) - np.mean(grid)


def get_all_points(mouse):
    parts = [elbow, wrist, digit, neck, jaw, vibrissa, trunk, shoulder, hindlimb, tail]

    result = []
    for part in parts:
        for point in part:
            if get_mouse(point) == mouse:
                result.append(point)

    return result


def get_mouse(point):
    """
    :param point: horizontal, vertical figure coordinates
    :return: mouse number (0-5, corresponding to panel C-H)
    """
    if point[0] < np.mean(bregmas, axis=0)[0]:
        col = 0
    else:
        col = 1

    if point[1] > bregmas[2][1]:
        row = 0
    elif point[1] > bregmas[4][1]:
        row = 1
    else:
        row = 2

    return row*2 + col


# points from Figure 2 of Tennant et al.
bregmas = [
    [0.5470779220779218, 3.66951566951567],
    [1.814935064935065, 3.5925925925925934],
    [0.547077922077922, 2.324786324786325],
    [1.8214285714285716, 2.287749287749288],
    [0.5519480519480522, 1.116809116809117],
    [1.8279220779220782, 1.0056980056980058]
]

ml_15 = [ # vertical coords of lines 1.5mm from centre
    3.1310541310541318,
    3.0569800569800574,
    1.7891737891737898,
    1.7521367521367521,
    0.5811965811965814,
    0.46723646723646706
]

# cytoarchitectural somatosensory/motor overlap area borders (available for mice 0-3)
ol_0 = [
    [0.823051948051948, 3.2222222222222228],
    [0.7922077922077921, 3.170940170940171],
    [0.7402597402597404, 3.1139601139601143],
    [0.6818181818181819, 3.068376068376069],
    [0.6266233766233766, 3.0284900284900287],
    [0.5681818181818181, 3.002849002849003],
    [0.48701298701298706, 2.9886039886039892],
    [0.46915584415584405, 2.974358974358975],
    [0.44155844155844143, 2.914529914529915],
    [0.39285714285714285, 2.837606837606838],
    [0.3603896103896104, 2.777777777777778],
    [0.33116883116883117, 2.7293447293447297],
    [0.41558441558441556, 2.7378917378917382],
    [0.5032467532467533, 2.752136752136752],
    [0.5909090909090908, 2.7720797720797723],
    [0.672077922077922, 2.7920227920227925],
    [0.7110389610389609, 2.806267806267807],
    [0.7613636363636367, 2.8290598290598297],
    [0.8035714285714286, 2.857549857549858],
    [0.8246753246753247, 2.8831908831908835],
    [0.8376623376623376, 2.914529914529915],
    [0.8474025974025972, 2.9601139601139606],
    [0.8506493506493507, 3.017094017094018],
    [0.8474025974025972, 3.0740740740740744],
    [0.8392857142857153, 3.136752136752137]
]

ol_1 = [
    [2.0990259740259742, 3.1139601139601143],
    [2.0779220779220777, 3.085470085470086],
    [2.045454545454546, 3.0569800569800574],
    [2.012987012987013, 3.0341880341880345],
    [1.9870129870129873, 3.0170940170940175],
    [1.9642857142857144, 3.0000000000000004],
    [1.9383116883116882, 2.9886039886039892],
    [1.896103896103896, 2.9629629629629637],
    [1.8571428571428572, 2.9401709401709404],
    [1.801948051948052, 2.9031339031339036],
    [1.7532467532467533, 2.8717948717948723],
    [1.7272727272727273, 2.8490028490028494],
    [1.672077922077922, 2.7863247863247866],
    [1.6314935064935066, 2.717948717948718],
    [1.6623376623376622, 2.700854700854701],
    [1.6996753246753247, 2.686609686609687],
    [1.733766233766234, 2.6752136752136755],
    [1.7597402597402598, 2.6695156695156697],
    [1.8051948051948052, 2.66951566951567],
    [1.8571428571428563, 2.686609686609687],
    [1.905844155844156, 2.7094017094017095],
    [1.9577922077922079, 2.7293447293447297],
    [2.0194805194805197, 2.752136752136752],
    [2.050324675324675, 2.777777777777778],
    [2.0779220779220777, 2.817663817663818],
    [2.094155844155844, 2.8717948717948723],
    [2.0990259740259742, 2.9059829059829063],
    [2.1006493506493507, 2.9886039886039892]
]

ol_2 = [
    [0.7662337662337664, 1.9572649572649576],
    [0.724025974025974, 1.928774928774929],
    [0.6785714285714286, 1.8945868945868949],
    [0.6168831168831168, 1.8433048433048436],
    [0.5844155844155845, 1.811965811965812],
    [0.5519480519480517, 1.774928774928775],
    [0.5292207792207793, 1.740740740740741],
    [0.4853896103896103, 1.6609686609686611],
    [0.45129870129870125, 1.606837606837607],
    [0.4042207792207793, 1.5584045584045585],
    [0.35714285714285704, 1.5185185185185182],
    [0.3149350649350649, 1.49002849002849],
    [0.35714285714285715, 1.4672364672364675],
    [0.39285714285714307, 1.4558404558404554],
    [0.4350649350649351, 1.4529914529914532],
    [0.4886363636363637, 1.4558404558404554],
    [0.5487012987012987, 1.4672364672364675],
    [0.6006493506493507, 1.4814814814814814],
    [0.6493506493506493, 1.4957264957264957],
    [0.6915584415584415, 1.5185185185185186],
    [0.7224025974025972, 1.5413105413105415],
    [0.7337662337662338, 1.5584045584045585],
    [0.75, 1.5982905982905984],
    [0.7613636363636365, 1.6438746438746437],
    [0.7646103896103895, 1.6780626780626777],
    [0.7678571428571428, 1.735042735042735],
    [0.7694805194805194, 1.8148148148148144]
]

ol_3 = [
    [2.133116883116883, 1.8632478632478633],
    [2.086038961038961, 1.8461538461538465],
    [2.030844155844156, 1.8404558404558407],
    [1.978896103896104, 1.8347578347578346],
    [1.9107142857142874, 1.8262108262108263],
    [1.873376623376624, 1.811965811965812],
    [1.8571428571428572, 1.7977207977207978],
    [1.8409090909090904, 1.774928774928775],
    [1.8214285714285716, 1.7264957264957266],
    [1.801948051948052, 1.683760683760684],
    [1.7824675324675325, 1.6552706552706553],
    [1.7370129870129871, 1.623931623931624],
    [1.698051948051948, 1.5982905982905984],
    [1.6769480519480522, 1.581196581196581],
    [1.7077922077922079, 1.5213675213675213],
    [1.7272727272727273, 1.49002849002849],
    [1.75487012987013, 1.4643874643874644],
    [1.7857142857142858, 1.45014245014245],
    [1.8360389610389616, 1.4472934472934473],
    [1.8766233766233769, 1.4529914529914532],
    [1.9220779220779223, 1.4615384615384617],
    [1.9805194805194803, 1.484330484330484],
    [2.016233766233767, 1.5128205128205128],
    [2.0470779220779223, 1.5470085470085468],
    [2.074675324675325, 1.5868945868945872],
    [2.1006493506493507, 1.6296296296296298],
    [2.133116883116883, 1.7037037037037042],
    [2.1412337662337664, 1.7293447293447293],
    [2.1444805194805197, 1.7549857549857553],
    [2.1428571428571432, 1.792022792022792]
]

tail = [
    [0.8668831168831168, 3.1851851851851856],
    [2.034090909090909, 3.21937321937322],
    [2.081168831168832, 3.21937321937322],
    [2.082792207792208, 3.136752136752137],
    [2.13474025974026, 3.136752136752137],
    [2.0827922077922087, 3.045584045584046],
    [2.082792207792208, 2.9629629629629637],
    [2.082792207792208, 2.8917378917378924],
    [2.136363636363636, 2.7920227920227925],
    [2.084415584415585, 2.7037037037037037],
    [2.061688311688312, 2.1082621082621085],
    [2.1071428571428568, 2.1082621082621085],
    [2.152597402597402, 1.9458689458689455],
    [0.2597402597402597, 0.9116809116809117],
    [0.7629870129870129, 0.7350427350427351],
    [0.8116883116883116, 0.6495726495726495],
    [0.8116883116883116, 0.5612535612535612],
    [0.7613636363636362, 0.47863247863247826],
    [0.8116883116883116, 0.47863247863247826],
    [0.8116883116883116, 0.39031339031338996]
]

hindlimb = [
    [0.7224025974025974, 3.1880341880341887],
    [0.8181818181818181, 3.2678062678062685],
    [0.7711038961038961, 3.014245014245015],
    [0.8116883116883118, 1.9572649572649572],
    [0.8116883116883118, 1.868945868945869],
    [0.8149350649350651, 1.7777777777777781],
    [0.8149350649350651, 1.700854700854701],
    [0.8603896103896105, 1.698005698005698],
    [0.8603896103896105, 1.8689458689458684],
    [0.7629870129870129, 1.8689458689458684],
    [0.7142857142857142, 1.868945868945869],
    [0.6688311688311688, 1.7777777777777777],
    [0.6688311688311688, 1.6980056980056983],
    [0.6688311688311688, 1.6210826210826217],
    [0.714285714285714, 1.7777777777777777],
    [0.7142857142857142, 1.6980056980056983],
    [0.7142857142857144, 1.6210826210826212],
    [0.7629870129870127, 1.7777777777777777],
    [0.7629870129870129, 1.7008547008547006],
    [0.7629870129870131, 1.6210826210826217],
    [0.7629870129870131, 1.5270655270655267],
    [0.8116883116883118, 1.5270655270655267],
    [0.8620129870129871, 1.5270655270655267],
    [0.9107142857142858, 1.5270655270655267],
    [2.016233766233767, 2.0256410256410255],
    [2.060064935064935, 2.0256410256410255],
    [2.105519480519481, 1.948717948717949],
    [2.0600649350649354, 1.8717948717948718],
    [2.058441558441559, 1.7891737891737893],
    [2.016233766233767, 1.7891737891737893],
    [2.1055194805194812, 1.8717948717948718],
    [2.1542207792207795, 1.8717948717948718],
    [2.1525974025974035, 1.7863247863247862],
    [0.7597402597402598, 0.5612535612535612],
    [0.7110389610389609, 0.6467236467236464],
    [0.7110389610389609, 0.5612535612535607],
    [0.6607142857142858, 0.5612535612535607],
    [0.6120129870129871, 0.47293447293447244],
    [0.6607142857142858, 0.47578347578347513],
    [0.7110389610389611, 0.47578347578347513],
    [1.9870129870129873, 0.7236467236467234],
    [2.0860389610389616, 0.8148148148148144],
    [2.0860389610389616, 0.6296296296296293],
    [2.037337662337663, 0.6296296296296293],
    [1.9415584415584415, 0.5299145299145289],
    [1.941558441558441, 0.45299145299145227],
    [1.941558441558441, 0.37321937321937293],
    [1.9870129870129865, 0.5299145299145289],
    [1.9870129870129873, 0.45299145299145227],
    [1.9870129870129873, 0.37321937321937293],
    [2.0373376623376624, 0.5299145299145285],
    [2.0373376623376616, 0.45299145299145227],
    [2.037337662337662, 0.3732193732193734],
    [2.035714285714286, 2.951566951566952],
    [2.0357142857142856, 2.883190883190884]
]

shoulder = [
    [0.625, 2.931623931623932],
    [0.6737012987012987, 2.931623931623932],
    [0.7207792207792207, 2.931623931623932],
    [0.6168831168831168, 1.9572649572649572],
    [0.6639610389610389, 1.9572649572649572],
    [0.6639610389610389, 2.03988603988604],
    [0.6639610389610389, 1.8717948717948718],
    [0.6152597402597402, 1.7806267806267808],
    [0.5649350649350648, 1.868945868945869],
    [0.6152597402597404, 1.6951566951566952],
    [0.6152597402597402, 1.6153846153846154],
    [0.6655844155844155, 1.5242165242165244],
    [0.7126623376623376, 1.4415954415954415],
    [1.969155844155844, 1.9430199430199433],
    [1.9691558441558445, 1.7863247863247862],
    [2.105519480519481, 1.7834757834757835],
    [2.105519480519481, 1.7008547008547006],
    [2.0584415584415585, 1.700854700854701],
    [2.0162337662337664, 1.700854700854701],
    [2.0162337662337664, 1.6153846153846154],
    [2.0162337662337664, 1.5356125356125356],
    [0.7110389610389609, 0.29344729344729314],
    [0.7613636363636362, 0.38176638176638145],
    [0.7629870129870131, 0.29344729344729314],
    [0.7629870129870131, 0.21367521367521292],
    [0.8116883116883118, 0.29344729344729314],
    [0.8603896103896105, 0.29344729344729314],
    [0.8116883116883118, 0.21367521367521292],
    [0.8603896103896107, 0.21367521367521292],
    [0.8116883116883118, 0.1282051282051273],
    [0.8603896103896107, 0.1282051282051282],
    [1.7337662337662338, 0.7207977207977208],
    [1.7840909090909092, 0.7207977207977212],
    [1.8344155844155847, 0.7207977207977208],
    [1.883116883116883, 0.6353276353276351],
    [2.0340909090909096, 0.2678062678062676],
    [2.087662337662338, 0.17663817663817616],
    [2.1347402597402603, 0.17663817663817616]
]

trunk = [
    [0.13798701298701294, 3.270655270655271],
    [0.237012987012987, 3.356125356125357],
    [0.4318181818181818, 3.270655270655271],
    [0.6266233766233764, 3.353276353276354],
    [0.6266233766233766, 3.276353276353277],
    [0.6753246753246753, 3.353276353276354],
    [0.6753246753246753, 3.276353276353277],
    [0.7224025974025974, 3.270655270655271],
    [0.7711038961038961, 3.353276353276354],
    [0.819805194805195, 3.356125356125357],
    [0.7711038961038961, 3.270655270655271],
    [0.7711038961038961, 3.1908831908831914],
    [0.819805194805195, 3.1880341880341887],
    [0.819805194805195, 3.102564102564103],
    [0.8652597402597404, 3.102564102564103],
    [0.8668831168831168, 3.2678062678062685],
    [0.6266233766233764, 3.193732193732194],
    [0.6737012987012987, 3.193732193732194],
    [0.8198051948051948, 3.0170940170940175],
    [0.8652597402597404, 3.0170940170940175],
    [1.9350649350649354, 3.216524216524217],
    [1.9837662337662336, 3.142450142450143],
    [2.0357142857142856, 3.142450142450143],
    [1.9837662337662336, 3.051282051282052],
    [0.6152597402597402, 1.868945868945869],
    [0.7142857142857144, 1.9544159544159547],
    [0.7126623376623378, 1.5242165242165244],
    [1.9269480519480515, 1.9458689458689458],
    [1.926948051948052, 2.0256410256410255],
    [1.9675324675324672, 2.0256410256410255],
    [2.0162337662337664, 2.1082621082621085],
    [2.1087662337662336, 2.0256410256410255],
    [2.1509740259740266, 2.0256410256410255],
    [1.9707792207792214, 1.8660968660968662],
    [2.014610389610389, 1.8660968660968662],
    [2.014610389610389, 1.9430199430199429],
    [2.0551948051948052, 1.9430199430199429],
    [0.7613636363636365, 0.6467236467236464],
    [1.6347402597402598, 0.8148148148148144],
    [1.8344155844155847, 0.8119658119658117],
    [1.8847402597402598, 0.8119658119658117],
    [1.8847402597402603, 0.7207977207977208],
    [1.9350649350649354, 0.7207977207977203],
    [1.9350649350649354, 0.6353276353276351],
    [1.9837662337662336, 0.6353276353276351],
    [2.0860389610389616, 0.7236467236467234]
]

vibrissa = [
    [0.12662337662337664, 2.213675213675214],
    [0.12662337662337664, 2.128205128205128],
    [0.12337662337662336, 1.9572649572649572],
    [0.17532467532467533, 2.213675213675214],
    [0.2191558441558441, 2.213675213675214],
    [0.17532467532467533, 2.131054131054131],
    [0.17532467532467533, 2.0484330484330484],
    [0.1720779220779221, 1.9601139601139599],
    [0.21915584415584416, 2.1282051282051286],
    [0.2207792207792208, 2.048433048433048],
    [0.27272727272727276, 2.048433048433048],
    [0.3181818181818183, 2.0484330484330484],
    [0.36525974025974023, 2.1282051282051286],
    [0.3181818181818183, 2.128205128205128],
    [0.27272727272727276, 2.1282051282051277],
    [0.41883116883116894, 2.03988603988604],
    [0.4659090909090911, 2.03988603988604],
    [0.41883116883116894, 1.96011396011396],
    [0.22564935064935066, 1.8660968660968658],
    [0.22402597402597402, 1.7920227920227916],
    [0.22240259740259744, 1.7008547008547001],
    [0.26785714285714285, 1.792022792022792],
    [0.2678571428571429, 1.8660968660968658],
    [0.36688311688311687, 1.700854700854701],
    [0.3198051948051946, 1.6125356125356127],
    [0.3685064935064935, 1.5213675213675213],
    [0.5178571428571428, 1.4358974358974357],
    [0.4675324675324675, 1.3532763532763532],
    [1.3327922077922079, 2.0256410256410255],
    [1.3782467532467533, 2.0256410256410255],
    [1.4253246753246755, 2.1111111111111116],
    [1.37987012987013, 1.9316239316239312],
    [1.37987012987013, 1.8660968660968658],
    [1.4220779220779223, 1.8660968660968662],
    [1.422077922077922, 1.9316239316239316],
    [1.470779220779221, 1.7806267806267808],
    [1.5162337662337664, 1.7806267806267808],
    [1.5584415584415585, 1.7806267806267808],
    [1.5162337662337664, 1.700854700854701],
    [1.5162337662337664, 2.031339031339032],
    [1.512987012987013, 2.1111111111111116],
    [1.4707792207792207, 2.1111111111111116],
    [1.5616883116883118, 2.1111111111111116],
    [1.6103896103896105, 2.1082621082621085],
    [1.654220779220779, 2.1082621082621085],
    [1.698051948051948, 2.1082621082621085],
    [1.698051948051948, 2.037037037037037],
    [1.7402597402597402, 2.1082621082621085],
    [1.7824675324675325, 2.1082621082621085],
    [1.8295454545454546, 2.105413105413106],
    [1.8766233766233764, 2.105413105413106],
    [1.925324675324675, 2.105413105413106],
    [1.970779220779221, 2.105413105413106],
    [1.7402597402597402, 2.037037037037037],
    [1.7824675324675325, 2.037037037037037],
    [1.831168831168831, 2.037037037037037],
    [1.8766233766233769, 2.037037037037037],
    [1.6055194805194806, 1.700854700854701],
    [1.6964285714285714, 1.6153846153846154]
]

jaw = [
    [0.18668831168831168, 2.9259259259259265],
    [0.23376623376623373, 2.9259259259259265],
    [1.3847402597402598, 0.45299145299145227],
    [1.4318181818181819, 0.5384615384615379],
    [1.4318181818181817, 0.45299145299145227],
    [1.4285714285714286, 0.3618233618233613],
    [1.482142857142857, 0.5384615384615383],
    [1.482142857142857, 0.4558404558404554],
    [1.5340909090909094, 0.4558404558404554],
    [1.5340909090909094, 0.3675213675213671],
    [1.5779220779220777, 0.4558404558404554],
    [1.5795454545454546, 0.3675213675213671],
    [1.5811688311688312, 0.273504273504273]
]

neck = [
    [0.13961038961038957, 3.353276353276354],
    [0.18668831168831168, 3.353276353276354],
    [0.18668831168831168, 3.2735042735042743],
    [0.18668831168831168, 3.1851851851851856],
    [0.13798701298701294, 3.1851851851851856],
    [0.237012987012987, 3.2735042735042743],
    [0.237012987012987, 3.1880341880341887],
    [0.2889610389610389, 3.353276353276354],
    [0.2889610389610389, 3.2735042735042743],
    [0.2857142857142857, 3.1880341880341887],
    [0.28733766233766234, 3.102564102564103],
    [0.2857142857142857, 3.0170940170940175],
    [0.33441558441558444, 3.353276353276354],
    [0.3327922077922079, 3.2735042735042743],
    [0.33116883116883117, 3.1880341880341887],
    [0.33116883116883117, 3.102564102564103],
    [0.33116883116883117, 3.0170940170940175],
    [0.3782467532467532, 3.353276353276354],
    [0.42857142857142866, 3.353276353276354],
    [0.3766233766233767, 3.270655270655271],
    [0.3766233766233767, 3.1880341880341887],
    [0.37824675324675333, 3.105413105413106],
    [0.4301948051948053, 3.0113960113960117],
    [0.47889610389610376, 3.2735042735042743],
    [0.4788961038961039, 3.193732193732194],
    [0.5259740259740262, 3.193732193732194],
    [0.525974025974026, 3.270655270655271],
    [0.573051948051948, 3.2735042735042743],
    [0.37012987012987014, 2.037037037037037],
    [0.3685064935064934, 1.9572649572649572],
    [0.366883116883117, 1.8803418803418805],
    [0.3181818181818182, 1.8774928774928776],
    [0.3181818181818182, 1.7977207977207978],
    [0.3181818181818182, 1.9572649572649572],
    [0.2694805194805195, 1.9572649572649572],
    [0.22564935064935066, 1.9572649572649572],
    [1.3750000000000002, 3.216524216524217],
    [1.375, 3.136752136752137],
    [1.4269480519480522, 3.3048433048433052],
    [1.478896103896104, 3.3931623931623935],
    [1.478896103896104, 3.3048433048433052],
    [1.478896103896104, 3.2279202279202286],
    [1.5292207792207793, 3.3931623931623935],
    [1.5292207792207793, 3.3048433048433052],
    [1.5795454545454546, 3.3048433048433052],
    [1.6785714285714286, 3.3048433048433052],
    [1.7775974025974024, 3.2222222222222228],
    [1.7305194805194803, 3.2222222222222228],
    [1.6785714285714284, 3.2250712250712255],
    [1.6266233766233769, 3.2250712250712255],
    [1.5779220779220777, 3.2250712250712255],
    [1.529220779220779, 3.2279202279202286],
    [1.529220779220779, 3.136752136752137],
    [1.577922077922078, 3.136752136752137],
    [1.6250000000000002, 3.136752136752137],
    [1.6250000000000002, 3.048433048433049],
    [1.5746753246753247, 3.048433048433049],
    [1.529220779220779, 3.048433048433049],
    [1.5292207792207793, 2.9658119658119664],
    [1.5746753246753247, 2.9658119658119664],
    [1.6250000000000002, 2.9658119658119664],
    [1.4237012987012987, 2.0284900284900287],
    [1.5194805194805194, 1.8660968660968662],
    [1.6006493506493507, 1.7863247863247866],
    [1.5616883116883118, 2.0284900284900287],
    [1.603896103896104, 2.0284900284900287],
    [1.6444805194805192, 2.031339031339032],
    [1.5616883116883118, 1.8660968660968658],
    [1.603896103896104, 1.8660968660968658],
    [1.647727272727273, 1.868945868945869],
    [1.5616883116883116, 1.9515669515669518],
    [1.603896103896104, 1.9515669515669518],
    [1.6461038961038963, 1.9515669515669518],
    [0.4123376623376624, 0.8290598290598288],
    [0.46103896103896097, 0.8290598290598288],
    [0.21103896103896103, 0.8233618233618234],
    [0.262987012987013, 0.823361823361823],
    [0.3116883116883115, 0.823361823361823],
    [0.21266233766233766, 0.7378917378917378],
    [0.262987012987013, 0.7378917378917378],
    [0.3116883116883115, 0.7378917378917373],
    [0.36038961038961054, 0.7378917378917373],
    [0.262987012987013, 0.6524216524216522],
    [0.3116883116883116, 0.6552706552706544],
    [0.3587662337662338, 0.6552706552706544],
    [1.5844155844155845, 0.8974358974358969],
    [1.5844155844155845, 0.8119658119658117],
    [1.5357142857142858, 0.8119658119658117],
    [1.4853896103896105, 0.7236467236467234],
    [1.5357142857142856, 0.723646723646723],
    [1.5844155844155843, 0.723646723646723],
    [1.6331168831168832, 0.7236467236467234],
    [1.6818181818181819, 0.723646723646723],
    [1.6314935064935068, 0.6353276353276347],
    [1.582792207792208, 0.6353276353276347],
    [1.5389610389610389, 0.6353276353276351],
    [1.5389610389610389, 0.5441595441595437],
    [1.582792207792208, 0.5441595441595437],
    [1.6331168831168832, 0.4415954415954415],
    [1.6331168831168832, 0.3618233618233613]
]

digit = [
    [0.4788961038961039, 3.0170940170940175],
    [0.5243506493506493, 3.0170940170940175],
    [0.5762987012987013, 2.8433048433048436],
    [0.7224025974025974, 2.8461538461538463],
    [0.4788961038961039, 2.760683760683761],
    [0.4788961038961039, 2.6809116809116813],
    [0.525974025974026, 2.760683760683761],
    [0.5762987012987013, 2.760683760683761],
    [0.5762987012987013, 2.6809116809116813],
    [1.6801948051948052, 3.136752136752137],
    [1.732142857142857, 3.1339031339031345],
    [1.732142857142857, 3.0541310541310547],
    [1.7824675324675325, 2.9658119658119664],
    [1.7857142857142858, 3.0541310541310547],
    [1.7857142857142858, 3.136752136752137],
    [1.8295454545454546, 3.136752136752137],
    [1.8798701298701297, 3.136752136752137],
    [1.8279220779220782, 3.0541310541310547],
    [1.8295454545454546, 2.9658119658119664],
    [1.831168831168831, 2.8774928774928776],
    [1.831168831168831, 2.7920227920227925],
    [1.8782467532467533, 2.8774928774928776],
    [1.8782467532467533, 2.7920227920227925],
    [1.9318181818181817, 2.9629629629629637],
    [1.933441558441559, 2.7037037037037037],
    [1.9821428571428568, 2.7037037037037037],
    [0.37012987012987014, 1.7863247863247862],
    [0.41883116883116883, 1.8689458689458691],
    [0.41883116883116883, 1.7891737891737893],
    [0.46428571428571425, 1.868945868945869],
    [0.5129870129870131, 1.8717948717948718],
    [0.46428571428571425, 1.7891737891737898],
    [0.4675324675324675, 1.6980056980056983],
    [0.4675324675324675, 1.6153846153846154],
    [0.41558441558441556, 1.5185185185185182],
    [0.5178571428571428, 1.6125356125356123],
    [0.5649350649350648, 1.6951566951566952],
    [0.5633116883116884, 1.6125356125356127],
    [0.5178571428571428, 1.5299145299145303],
    [0.5633116883116882, 1.5299145299145303],
    [0.6136363636363638, 1.5242165242165244],
    [0.5649350649350648, 1.4415954415954415],
    [0.6136363636363638, 1.4415954415954415],
    [0.6607142857142858, 1.4415954415954415],
    [0.4610389610389611, 0.5612535612535612],
    [0.46103896103896097, 0.4814814814814814],
    [0.5600649350649352, 0.38746438746438683],
    [1.698051948051948, 1.9430199430199433],
    [1.8766233766233769, 1.9458689458689458],
    [1.698051948051948, 1.8632478632478628],
    [1.7418831168831168, 1.8632478632478628],
    [1.6980519480519483, 1.7863247863247862],
    [1.7418831168831168, 1.7834757834757835],
    [1.7451298701298703, 1.7094017094017095],
    [1.7873376623376624, 1.7806267806267808],
    [1.7873376623376624, 1.7122507122507127],
    [1.8344155844155847, 1.7806267806267808],
    [1.8766233766233769, 1.7806267806267808],
    [1.8344155844155843, 1.7122507122507127],
    [1.8344155844155847, 1.6324786324786325],
    [1.8766233766233769, 1.7037037037037042],
    [1.8766233766233769, 1.6324786324786325],
    [1.9220779220779218, 1.700854700854701],
    [1.9675324675324672, 1.700854700854701],
    [1.9220779220779223, 1.6296296296296298],
    [1.9237012987012987, 1.5441595441595442],
    [1.9675324675324672, 1.6296296296296298],
    [1.9659090909090908, 1.5470085470085468],
    [1.6834415584415585, 0.27065527065526984],
    [1.6834415584415585, 0.4501424501424496],
    [1.7305194805194806, 0.4501424501424496],
    [1.7824675324675325, 0.4501424501424496],
    [1.7840909090909092, 0.3646723646723644],
    [1.7857142857142858, 0.27635327635327567],
    [1.831168831168831, 0.3618233618233617],
    [1.831168831168831, 0.27635327635327567],
    [1.8344155844155847, 0.18233618233618287]
]

wrist = [
    [0.18668831168831168, 3.0997150997151],
    [0.23538961038961037, 3.014245014245015],
    [0.4318181818181818, 3.182336182336183],
    [0.4318181818181818, 3.102564102564103],
    [0.47727272727272724, 3.0997150997151],
    [0.38311688311688313, 3.0113960113960117],
    [0.383116883116883, 2.931623931623932],
    [0.48214285714285715, 2.8461538461538467],
    [0.5292207792207793, 2.928774928774929],
    [0.5746753246753247, 2.928774928774929],
    [0.5275974025974026, 2.8461538461538467],
    [0.6737012987012987, 2.8461538461538467],
    [1.6785714285714286, 3.045584045584046],
    [1.6785714285714286, 2.9658119658119664],
    [1.728896103896104, 2.9601139601139606],
    [1.728896103896104, 2.8803418803418808],
    [1.7305194805194806, 2.7920227920227925],
    [1.7792207792207793, 2.7920227920227925],
    [1.883116883116883, 3.045584045584046],
    [1.8814935064935066, 2.9658119658119664],
    [1.9318181818181825, 2.8774928774928776],
    [1.931818181818182, 2.7920227920227925],
    [1.883116883116883, 2.703703703703704],
    [0.4675324675324675, 1.9544159544159543],
    [0.5146103896103897, 1.9515669515669518],
    [0.3685064935064935, 1.6096866096866096],
    [0.5162337662337662, 1.6951566951566952],
    [0.5649350649350648, 1.7806267806267808],
    [0.4675324675324675, 1.4387464387464388],
    [0.1607142857142857, 0.7350427350427351],
    [0.4123376623376623, 0.7350427350427351],
    [0.45941558441558433, 0.7350427350427351],
    [0.4123376623376623, 0.6495726495726495],
    [0.4123376623376623, 0.5612535612535612],
    [0.41071428571428564, 0.47863247863247826],
    [0.5097402597402598, 0.5555555555555554],
    [0.5097402597402598, 0.4814814814814814],
    [0.6087662337662336, 0.5641025641025639],
    [0.6574675324675325, 0.6524216524216522],
    [0.6103896103896105, 0.6524216524216522],
    [0.6103896103896105, 0.732193732193732],
    [0.6590909090909092, 0.732193732193732],
    [0.7077922077922079, 0.732193732193732],
    [0.6623376623376622, 0.3846153846153846],
    [0.7077922077922079, 0.3846153846153846],
    [1.7435064935064937, 1.9458689458689458],
    [1.7873376623376622, 1.9430199430199429],
    [1.7873376623376622, 1.8660968660968662],
    [1.8344155844155847, 1.5384615384615388],
    [1.8782467532467537, 1.4558404558404558],
    [1.4350649350649352, 0.632478632478632],
    [1.4805194805194803, 0.632478632478632],
    [1.7857142857142858, 0.5384615384615383],
    [1.6866883116883118, 0.3589743589743586],
    [1.733766233766234, 0.3561253561253559],
    [1.7337662337662338, 0.273504273504273],
    [1.8847402597402598, 0.08547008547008517]
]

elbow = [
    [0.237012987012987, 3.0997150997151],
    [0.4301948051948052, 2.8461538461538467],
    [0.47727272727272724, 2.931623931623932],
    [0.5292207792207793, 3.0997150997151],
    [0.5762987012987011, 3.182336182336183],
    [0.5762987012987011, 3.0997150997151],
    [0.5762987012987013, 3.0170940170940175],
    [0.6266233766233766, 3.102564102564103],
    [0.6266233766233766, 3.0170940170940175],
    [0.625, 2.8461538461538467],
    [0.6737012987012985, 3.102564102564103],
    [0.6737012987012987, 3.01994301994302],
    [0.724025974025974, 3.105413105413106],
    [0.7694805194805194, 3.102564102564103],
    [0.7694805194805194, 2.8461538461538467],
    [1.426948051948052, 3.21937321937322],
    [1.4269480519480522, 3.136752136752137],
    [1.4756493506493509, 3.136752136752137],
    [1.426948051948052, 3.0569800569800574],
    [1.4756493506493507, 3.0569800569800574],
    [1.780844155844156, 2.874643874643875],
    [1.931818181818182, 3.1310541310541318],
    [1.9334415584415585, 3.048433048433049],
    [2.0340909090909087, 3.048433048433049],
    [1.9837662337662332, 2.9601139601139606],
    [1.9821428571428568, 2.874643874643875],
    [1.9837662337662336, 2.7948717948717956],
    [2.035714285714286, 2.7920227920227925],
    [2.0844155844155847, 2.7891737891737893],
    [0.5649350649350648, 1.9544159544159547],
    [0.5162337662337662, 1.7806267806267808],
    [0.41883116883116883, 1.6951566951566952],
    [0.41883116883116894, 1.6125356125356127],
    [0.4675324675324675, 1.5242165242165244],
    [0.15909090909090906, 0.8233618233618234],
    [0.3116883116883116, 0.5612535612535612],
    [0.3555194805194806, 0.5612535612535612],
    [0.4626623376623376, 0.6467236467236464],
    [0.5129870129870129, 0.823361823361823],
    [0.5616883116883116, 0.8233618233618234],
    [0.6120129870129869, 0.8233618233618234],
    [0.5129870129870129, 0.7378917378917378],
    [0.5616883116883116, 0.7378917378917378],
    [0.5113636363636365, 0.6524216524216522],
    [0.5600649350649352, 0.6524216524216522],
    [0.5616883116883116, 0.5612535612535612],
    [0.5616883116883116, 0.4729344729344729],
    [0.6103896103896105, 0.3846153846153846],
    [0.6590909090909092, 0.29914529914529897],
    [1.4707792207792207, 2.0256410256410255],
    [1.4707792207792207, 1.9458689458689458],
    [1.5162337662337664, 1.9458689458689458],
    [1.4707792207792207, 1.8603988603988604],
    [1.6525974025974026, 1.7806267806267808],
    [1.6525974025974026, 1.700854700854701],
    [1.698051948051948, 1.700854700854701],
    [1.7435064935064937, 1.618233618233618],
    [1.7857142857142858, 1.6210826210826212],
    [1.7435064935064937, 1.5384615384615388],
    [1.7857142857142858, 1.5384615384615388],
    [1.8798701298701301, 1.5413105413105415],
    [1.8344155844155847, 1.9401709401709404],
    [1.8344155844155847, 1.8632478632478633],
    [1.8782467532467533, 1.8632478632478633],
    [1.9204545454545459, 1.8632478632478633],
    [1.9220779220779223, 1.7834757834757835],
    [1.6363636363636365, 0.5384615384615383],
    [1.6850649350649352, 0.6296296296296293],
    [1.6850649350649352, 0.5384615384615383],
    [1.7305194805194806, 0.5384615384615379],
    [1.7305194805194806, 0.6296296296296293],
    [1.7824675324675325, 0.6296296296296293],
    [1.8327922077922074, 0.6296296296296293],
    [1.8344155844155843, 0.541310541310541],
    [1.883116883116883, 0.5384615384615383],
    [1.883116883116883, 0.4472934472934469],
    [1.8344155844155847, 0.4529914529914527],
    [1.883116883116883, 0.3618233618233613],
    [1.9821428571428572, 0.2706552706552703],
    [1.9350649350649354, 0.2706552706552703],
    [1.8863636363636362, 0.2706552706552703],
    [1.8847402597402594, 0.1823361823361811],
    [1.9350649350649354, 0.18518518518518468],
    [1.9821428571428572, 0.18518518518518468],
    [2.0324675324675328, 0.1794871794871793],
    [1.9350649350649354, 0.08831908831908741],
    [1.9837662337662336, 0.08831908831908741],
    [2.0324675324675328, 0.08831908831908741],
    [2.0860389610389616, 0.08831908831908741],
    [2.133116883116883, 0.08831908831908741]
]


if __name__ == '__main__':
    # for point in tail:
    #     print(get_mouse(point))
    #
    # colors = ['k', 'r', 'g', 'b', 'm', 'c']
    # mice = [0, 1, 2, 3, 4, 5]
    # for mouse, color in zip(mice, colors):
    #     points = np.array(get_all_points(mouse))
    #     plt.scatter(points[:,0], points[:,1], color=color)
    # plt.show()

    # mouse = 5
    # points = get_all_points(mouse)
    # points = np.array(points) - np.array(bregmas[mouse])
    # # plt.scatter(points[:,0], points[:,1])
    # plt.subplot(1,2,1), plt.hist(points[:,0], 100)
    # plt.subplot(1,2,2), plt.hist(points[:,1], 100)
    # plt.show()
    # print(get_period(points[:,1]))
    # points supposed to be 250 micrometers apart
    # print(get_image_vertical_distance_per_mm())

    # print(get_image_vertical_distance_per_mm()/get_period(points[:,1]))

    # coords = np.array(get_cortical_coords(points))
    # plt.scatter(coords[:,0], coords[:,1])
    # plt.show()

    # mm = MotorMap(mouse)
    # mm.show()
    # plt.show()


    # am = AggregateMap()
    # print(am.map_point((-1, -1)))
    #
    # ap_points = np.linspace(-2, 2, 50)
    # ml_points = np.linspace(-3, 0, 50)
    # for ap in ap_points:
    #     for ml in ml_points:
    #         vector = am.map_point((ap, ml))
    #         plt.scatter(ap, ml, color=am.get_color(vector))
    #         # key = mm.map_point((ap, ml))
    #         # plt.scatter(ap, ml, color=mm.display_colors[key])
    # plt.show()

    # mm = MotorMap(0)

    vm = VoxelMotorRepresentation()
    # print(vm._positions.shape)
    # print(vm._layer_5_positions.shape)
    # for i in range(vm._positions.shape[0]):
    #     r = vm.get_motor_representation(vm._positions[i,:])
    #     print(r)
    # vm.get_motor_representation()
    vm.plot()
