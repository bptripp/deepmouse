"""
Data from Garrett et al. on V1 retinotopy, from their figure.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial import ConvexHull
from mcmodels.core import Mask, VoxelModelCache
from deepmouse.maps.flatmap import FlatMap


class Morph:
    """
    A mapping from one 2D shape to another. Shapes are defined by their
    border contours.
    """

    def __init__(self, source_border, target_border, angle):
        """
        :param source_border: vertices of border of source shape
        :param target_border: vertices of border of target shape
        :param angle: radians to rotate source counter-clockwise to best align with target
        """
        self.source_centre = np.array(find_centre(source_border))
        self.target_centre = np.array(find_centre(target_border))
        self.rot = np.array([[np.cos(angle), -np.sin(angle)], [np.sin(angle), np.cos(angle)]])
        self.angles = np.linspace(0, 2*np.pi, 100)

        offsets = np.array(source_border) - self.source_centre
        source_border = np.dot(offsets, self.rot) + self.source_centre

        source_radii = [get_radius(source_border, self.source_centre, angle) for angle in self.angles]
        target_radii = [get_radius(target_border, self.target_centre, angle) for angle in self.angles]
        self.gains = np.divide(target_radii, source_radii)

    def map_to_target(self, source_point):
        offset = np.array(source_point) - self.source_centre
        offset = np.dot(offset, self.rot)
        angle = get_angle(offset)
        gain = np.interp(angle, self.angles, self.gains)
        return self.target_centre + gain * offset


def get_angle(v):
    angle = np.arctan2(v[1], v[0])
    if angle < 0:
        angle = angle + 2*np.pi
    return angle


def get_radius(border, centre, angle):
    result = None
    for i in range(len(border)):
        vertex1 = border[i]
        vertex2 = border[0] if i == len(border) - 1 else border[i+1]
        radius = find_intersection(vertex1, vertex2, centre, angle)
        if radius is not None:
            result = radius
            break
    return result


def find_intersection(vertex1, vertex2, centre, angle):
    # method from https://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect
    result = None

    p = np.array(centre)
    r = np.array([np.cos(angle), np.sin(angle)])
    q = np.array(vertex1)
    s = np.array(vertex2) - q

    rxs = np.cross(r, s)
    u = np.cross(q-p, r) / rxs
    t = np.cross(q - p, s) / rxs
    if not rxs == 0 and 0 <= u <= 1 and t > 0:
        result = t

    return result


def find_centre(border):
    """
    Method from https://en.wikipedia.org/wiki/Centroid#Of_a_polygon

    :param border: ordered points that make up the border
    :return: centre point
    """

    area = 0
    cx = 0
    cy = 0

    for i in range(len(border)):
        x1, y1 = border[i] # this vertex
        x2, y2 = border[i+1] if i < len(border) - 1 else border[0] # next vertex

        d = x1*y2 - x2*y1
        area += d
        cx += (x1+x2) * d
        cy += (y1+y2) * d

    area = area / 2
    cx = cx / (6*area)
    cy = cy / (6*area)

    return np.array((cx, cy))

def is_inside(border, point):
    """    
    Method from http://web.archive.org/web/20110314030147/http://paulbourke.net/geometry/insidepoly/

    :param border: ordered points that make up the border  
    :param point: a point 
    :return: True if point is inside polygon defined by border
    """
    x, y = point
    inside = False
    for i in range(len(border)):
        x1, y1 = border[i]
        x2, y2 = border[i + 1] if i < len(border) - 1 else border[0]

        if ((y1 <= y < y2) or (y2 <= y < y1)) \
                and x < (x2 - x1) * (y - y1) / (y2 - y1) + x1:
            inside = not inside

    return inside


class Field:
    def __init__(self, border, contours, range):
        self.border = border
        self.levels = np.linspace(range[0], range[1], len(contours))

        self.curves = []
        for contour in contours:
            self.curves.append(Curve(contour))

    def get_value(self, point):
        if is_inside(self.border, point):
            distances = [curve.distance(point) for curve in self.curves]

            closest = np.argmin(distances)
            second_closest = _find_second_closest(distances, closest)

            shortest_distance = distances[closest]
            total_distance = distances[closest] + distances[second_closest]
            result = self.levels[closest] + shortest_distance/total_distance \
                     * (self.levels[second_closest]-self.levels[closest])
        else:
            result = np.nan

        return result


def _find_second_closest(distances, closest):
    # find second-closest point among immediate neighbours of closest point

    if closest == 0:
        result = 1
    elif closest == len(distances) - 1:
        result = len(distances) - 2
    elif distances[closest - 1] < distances[closest + 1]:
        result = closest - 1
    else:
        result = closest + 1

    return result


class VoxelRetinotopy:
    """
    Estimates RF centre in visual space for VISp voxels.
    """
    def __init__(self, cache=None):
        if cache is None:
            self.cache = VoxelModelCache(manifest_file='connectivity/voxel_model_manifest.json')
        else:
            self.cache = cache

        self.positions = self._get_positions('VISp')

        flatmap = FlatMap()
        flatmap._fit()

        def get_flatmap_border(area):
            positions_3d = self._get_positions(area)
            positions_flat = [flatmap.get_position_2d(p3d) for p3d in positions_3d]
            hull = ConvexHull(positions_flat)
            return np.array(hull.points[hull.vertices,:])

        flat_border_VISp = get_flatmap_border('VISp')
        flat_centre_VISp = find_centre(flat_border_VISp)
        # print(flat_centre_VISp)
        flat_centre_VISam = find_centre(get_flatmap_border('VISam'))
        flat_centre_VISal = find_centre(get_flatmap_border('VISal'))
        flat_angle_VISam = get_angle(flat_centre_VISam - flat_centre_VISp)
        flat_angle_VISal = get_angle(flat_centre_VISal - flat_centre_VISp)

        # plt.subplot(1,2,1)
        # fam = get_flatmap_border('VISam')
        # fal = get_flatmap_border('VISal')
        # plt.plot(flat_border_VISp[:,0], flat_border_VISp[:,1], color='k')
        # plt.plot(fam[:,0], fam[:,1], color='r')
        # plt.plot(fal[:,0], fal[:,1], color='b')
        # plt.subplot(1,2,2)
        # gp = np.array(VISp_border)
        # gam = np.array(VISam_border)
        # gal = np.array(VISal_border)
        # plt.plot(gp[:,0], gp[:,1], color='k')
        # plt.plot(gam[:,0], gam[:,1], color='r')
        # plt.plot(gal[:,0], gal[:,1], color='b')
        # plt.show()

        garrett_centre_VISp = find_centre(VISp_border)
        garrett_centre_VISam = find_centre(VISam_border)
        garrett_centre_VISal = find_centre(VISal_border)
        garrett_angle_VISam = get_angle(garrett_centre_VISam - garrett_centre_VISp)
        garrett_angle_VISal = get_angle(garrett_centre_VISal - garrett_centre_VISp)

        print('flat angles: am {} al {}'.format(flat_angle_VISam, flat_angle_VISal))
        print('garrett angles: am {} al {}'.format(garrett_angle_VISam, garrett_angle_VISal))

        angle_difference = garrett_angle_VISam + garrett_angle_VISal \
                           - flat_angle_VISam - flat_angle_VISal

        print('angle difference {}'.format(angle_difference))

        morph = Morph(flat_border_VISp, VISp_border, angle_difference)

        azimuth_field = Field(VISp_border, VISp_azimuth_contours, (-60, 60))
        altitude_field = Field(VISp_border, VISp_altitude_contours, (-40, 40))

        self.azimuths = []
        self.altitudes = []
        # positions_3d = self._get_positions('VISp')

        for position in self.positions:
            flat_position = flatmap.get_position_2d(position)
            point = morph.map_to_target(flat_position)
            self.azimuths.append(azimuth_field.get_value(point))
            self.altitudes.append(altitude_field.get_value(point))

    def _get_positions(self, area):
        source_mask = self.cache.get_source_mask()
        source_keys = source_mask.get_key(structure_ids=None)

        structure_tree = self.cache.get_structure_tree()
        id = structure_tree.get_id_acronym_map()[area]
        mask_indices = np.array(source_mask.mask.nonzero())

        positions = []
        for i in range(len(source_keys)):  # single hemisphere
            if structure_tree.structure_descends_from(source_keys[i], id):
                positions.append(mask_indices[:, i])

        return np.array(positions)

    def get_retinal_coords(self, voxel_position):
        result = None
        voxel_position = np.array(voxel_position)
        for i in range(self.positions.shape[0]):
            if np.linalg.norm(voxel_position - self.positions[i,:]) == 0:
                result = (self.azimuths[i], self.altitudes[i])
                break
        return result

    def plot(self):
        source_mask = self.cache.get_source_mask()
        source_keys = source_mask.get_key(structure_ids=None)
        source_key_volume = source_mask.map_masked_to_annotation(source_keys)

        voxels = source_key_volume < 0 #all False
        voxels[self.positions[:,0], self.positions[:,1], self.positions[:,2]] = True

        azimuth_colors = np.empty(voxels.shape, dtype=object)
        altitude_colors = np.empty(voxels.shape, dtype=object)
        for i in range(self.positions.shape[0]):
            c = np.array([0, 0, 1, .5]) + (self.azimuths[i]+60)/120 * np.array([1, 0, -1, 0])
            azimuth_colors[self.positions[i][0], self.positions[i][1], self.positions[i][2]] = c
            c = np.array([0, 0, 1, .5]) + (self.altitudes[i]+40)/80 * np.array([1, 0, -1, 0])
            altitude_colors[self.positions[i][0], self.positions[i][1], self.positions[i][2]] = c

        fig = plt.figure(figsize=(8,3))
        ax = fig.add_subplot(121, projection='3d')
        ax.voxels(voxels, facecolors=azimuth_colors, edgecolor='k')
        ax.set_xlabel('back')
        ax.set_ylabel('down')
        ax.set_zlabel('lateral')
        ax.set_xlim((min(self.positions[:,0]), max(self.positions[:,0])))
        ax.set_ylim((min(self.positions[:,1]), max(self.positions[:,1])))
        ax.set_zlim((min(self.positions[:,2]), max(self.positions[:,2])))
        ax.azim = -90
        ax.elev = -15
        ax.set_title('Azimuth')

        ax = fig.add_subplot(122, projection='3d')
        ax.voxels(voxels, facecolors=altitude_colors, edgecolor='k')
        ax.set_xlabel('back')
        ax.set_ylabel('down')
        ax.set_zlabel('lateral')
        ax.set_xlim((min(self.positions[:,0]), max(self.positions[:,0])))
        ax.set_ylim((min(self.positions[:,1]), max(self.positions[:,1])))
        ax.set_zlim((min(self.positions[:,2]), max(self.positions[:,2])))
        ax.azim = -90
        ax.elev = -15
        ax.set_title('Altitude')

        plt.tight_layout()
        plt.show()

        #TODO: fix colorbar
        #TODO: are there nulls?


class Curve():
    def __init__(self, points):
        self.points = np.array(points)

    def distance(self, point):
        point_distances = np.linalg.norm(point - self.points, axis=1)
        closest = np.argmin(point_distances)
        second_closest = _find_second_closest(point_distances, closest)

        a = point - self.points[closest]
        b = self.points[second_closest] - self.points[closest]
        return np.abs(np.cross(a, b) / np.linalg.norm(b))


VISp_border = [
    [0.6349427359168829, 0.7440381558028615],
    [0.5983033426832602, 0.7344992050874402],
    [0.5600513402124492, 0.7122416534181238],
    [0.5154147215780787, 0.6804451510333862],
    [0.4580038074792665, 0.6263910969793322],
    [0.42608072666146857, 0.5786963434022256],
    [0.410101465271941, 0.5437201907790141],
    [0.389340070681397, 0.5055643879173289],
    [0.38133778214332703, 0.48012718600953885],
    [0.36216368110335884, 0.4387917329093799],
    [0.35574868611586474, 0.4101748807631159],
    [0.3461388514779298, 0.3751987281399045],
    [0.33014440067643513, 0.3306836248012718],
    [0.3476147560074121, 0.3020667726550078],
    [0.36189027168794863, 0.2670906200317964],
    [0.3698014237542149, 0.23529411764705876],
    [0.39046661873563315, 0.21303656597774234],
    [0.41911384970583154, 0.20349761526232102],
    [0.45730509452877377, 0.18759936406995215],
    [0.49228884185796895, 0.1573926868044513],
    [0.5273080311484208, 0.14944356120826696],
    [0.5527908012921126, 0.15262321144674074],
    [0.5878454325438214, 0.1669316375198726],
    [0.6260873087399874, 0.18282988871224148],
    [0.6643114639555254, 0.18759936406995215],
    [0.699355968932589, 0.19554848966613658],
    [0.7248438022136037, 0.20190779014308413],
    [0.7551238949702794, 0.217806041335453],
    [0.7949935698156003, 0.2559618441971382],
    [0.8109652364991442, 0.28616852146263894],
    [0.8141803286988749, 0.3052464228934816],
    [0.828539386145231, 0.32273449920508734],
    [0.8174359259971846, 0.34976152623211443],
    [0.831812704424169, 0.3783783783783783],
    [0.8095703421668199, 0.4101748807631159],
    [0.7793712596073028, 0.44515103338632744],
    [0.76031361072575, 0.4769475357710651],
    [0.7476355148704343, 0.5151033386327503],
    [0.7349776715644083, 0.5659777424483305],
    [0.7175351634887042, 0.6120826709062002],
    [0.7064468927526251, 0.6486486486486486],
    [0.7001230342369344, 0.6772655007949124],
    [0.6683265318521969, 0.7090620031796502]
]

VISal_border = [
    [0.2961783439490455, 0.7329093799682034],
    [0.34872611464968317, 0.7344992050874404],
    [0.3821656050955422, 0.7058823529411764],
    [0.3821656050955422, 0.6693163751987281],
    [0.37420382165605215, 0.6486486486486487],
    [0.34235668789809015, 0.6184419713831478],
    [0.29777070063694344, 0.6057233704292527],
    [0.25477707006369643, 0.5914149443561209],
    [0.23248407643312197, 0.5866454689984102],
    [0.21178343949044676, 0.6057233704292527],
    [0.2356687898089178, 0.6422893481717011],
    [0.2515923566878988, 0.685214626391097],
    [0.26114649681528723, 0.7106518282988872],
    [0.28503184713375873, 0.7376788553259142]
]


VISam_border = [
    [0.7038216560509558, 0.8108108108108107],
    [0.7531847133757976, 0.8108108108108107],
    [0.7707006369426761, 0.8060413354531002],
    [0.7929936305732488, 0.7949125596184419],
    [0.8216560509554145, 0.766295707472178],
    [0.8391719745222939, 0.7424483306836247],
    [0.8487261146496823, 0.7201907790143084],
    [0.8471337579617839, 0.7042925278219396],
    [0.8264331210191087, 0.6724960254372019],
    [0.8073248407643319, 0.6740858505564388],
    [0.7882165605095546, 0.6883942766295708],
    [0.7388535031847145, 0.7106518282988872],
    [0.7229299363057331, 0.7106518282988872],
    [0.6942675159235674, 0.685214626391097],
    [0.6321656050955426, 0.7456279809220985],
    [0.6449044585987274, 0.7551669316375198]
]


VISp_azimuth_contours = [
    [[0.4324881269429772, 0.6025437201907788],
    [0.4547988415541808, 0.613672496025437],
    [0.4596138851477929, 0.6375198728139904]],

    [[0.370181159053395, 0.4737678855325913],
    [0.39406144623454464, 0.47058823529411753],
    [0.4163949449636972, 0.4960254372019076],
    [0.4339463104918333, 0.518282988871224],
    [0.4626542991099003, 0.5468998410174879],
    [0.4770158881249178, 0.5659777424483305],
    [0.47862596579344396, 0.5771065182829888],
    [0.4913977296892249, 0.5977742448330682],
    [0.4993898919526496, 0.6168521462639108],
    [0.5185336141686836, 0.6391096979332272],
    [0.5233334683503283, 0.6534181240063591],
    [0.5313180359077698, 0.6677265500794911],
    [0.529740868631839, 0.6772655007949124],
    [0.5170197361092823, 0.6883942766295705]],

    [[0.3493792593642724, 0.4101748807631159],
    [0.3652901683999472, 0.4022257551669315],
    [0.38123145625955646, 0.4133545310015897],
    [0.393980436037386, 0.41971383147853714],
    [0.42587566959991063, 0.4499205087440381],
    [0.45140147641084316, 0.48012718600953885],
    [0.46256316263809705, 0.4896661367249602],
    [0.47532733182789366, 0.5055643879173289],
    [0.49767601996901334, 0.5405405405405403],
    [0.5040581045639119, 0.5484896661367249],
    [0.5088579587455568, 0.5627980922098568],
    [0.5184272882849126, 0.5723370429252781],
    [0.5312015837493542, 0.5945945945945945],
    [0.5407861027006775, 0.613672496025437],
    [0.5535452087531518, 0.6263910969793322],
    [0.5599450143286786, 0.6454689984101748],
    [0.5807013457819001, 0.6804451510333862],
    [0.5839113748443086, 0.6963434022257551],
    [0.5823493969803448, 0.7154213036565976],
    [0.5744053345214828, 0.7265500794912558]],

    [[0.3365669903699129, 0.3640699523052463],
    [0.3556727390560286, 0.3624801271860094],
    [0.3875502516379248, 0.38155802861685206],
    [0.4417663260862963, 0.42925278219395846],
    [0.46569218150334657, 0.45468998410174877],
    [0.48482577744473576, 0.47058823529411753],
    [0.5183412149504321, 0.518282988871224],
    [0.5534641985559932, 0.5755166931637519],
    [0.5694181442589084, 0.5945945945945945],
    [0.6029639605885388, 0.6613672496025436],
    [0.6109713122639311, 0.6899841017488075],
    [0.6094194606746122, 0.7154213036565976],
    [0.5951287555821088, 0.7408585055643877]],

    [[0.33015959008840245, 0.3402225755166931],
    [0.35882201047056794, 0.3402225755166931],
    [0.3970689498040565, 0.35930047694753564],
    [0.42257703563436055, 0.3783783783783783],
    [0.43853098133727575, 0.3974562798092208],
    [0.4672237805433761, 0.4165341812400635],
    [0.4863725658967324, 0.44197138314785367],
    [0.5087010014885625, 0.46422893481717],
    [0.5374241795185968, 0.5023847376788552],
    [0.572531973712191, 0.5500794912559618],
    [0.594885724990633, 0.588235294117647],
    [0.60128553056616, 0.6073131955484895],
    [0.609270098123601, 0.6216216216216215],
    [0.6268442477696878, 0.6581875993640698],
    [0.6348515994450799, 0.6868044515103338],
    [0.6333048109930837, 0.7154213036565976],
    [0.6174318754873267, 0.7472178060413353]],

    [[0.3364859801727542, 0.3131955484896659],
    [0.37631261835083496, 0.32432432432432423],
    [0.3890691928346479, 0.33545310015898244],
    [0.4018156410438165, 0.3402225755166931],
    [0.43530069972557817, 0.36883942766295696],
    [0.492696424412423, 0.4133545310015897],
    [0.5150248600042528, 0.4356120826709061],
    [0.5357685336141684, 0.4626391096979331],
    [0.5772533492653404, 0.5151033386327503],
    [0.6043942968821201, 0.559618441971383],
    [0.6203634319970022, 0.588235294117647],
    [0.6331529168734114, 0.6200317965023846],
    [0.6491372414002614, 0.6581875993640698],
    [0.6539497534252123, 0.6804451510333862],
    [0.6539902585237916, 0.7058823529411764],
    [0.652428280659828, 0.7249602543720189],
    [0.6428994562190511, 0.7408585055643877]],

    [[0.3460072099075471, 0.2925278219395865],
    [0.3746898828390022, 0.3052464228934816],
    [0.4097571719340172, 0.327503974562798],
    [0.4416397476532359, 0.34976152623211443],
    [0.48309165291181033, 0.38155802861685206],
    [0.5261384464269439, 0.4149443561208266],
    [0.5405000354419611, 0.43402225755166923],
    [0.5756002349295715, 0.4769475357710651],
    [0.6011336364464877, 0.5119236883942765],
    [0.620297611211811, 0.5468998410174879],
    [0.6282745840632686, 0.5564387917329092],
    [0.6426488309215925, 0.5834658187599363],
    [0.6474588113778821, 0.6041335453100157],
    [0.6618457160795117, 0.6391096979332272],
    [0.674645327230565, 0.6772655007949124],
    [0.6715188399339767, 0.7138314785373607]],


    [[0.34916660759673124, 0.2766295707472177],
    [0.3810339939039822, 0.2893481717011127],
    [0.42247577288791227, 0.3147853736089028],
    [0.44160936882930124, 0.3306836248012718],
    [0.4862409243263497, 0.35930047694753564],
    [0.508564296780857, 0.3783783783783783],
    [0.5500136704707703, 0.40858505564387904],
    [0.5611880145413302, 0.4260731319554847],
    [0.6010728787986186, 0.4737678855325913],
    [0.6234215669397383, 0.5087440381558027],
    [0.6457753182181805, 0.5468998410174879],
    [0.6681594483205573, 0.6041335453100157],
    [0.6953763429971749, 0.6963434022257551]],

    [[0.3491362287727968, 0.2575516693163751],
    [0.3746291251911331, 0.2670906200317964],
    [0.3921627697386405, 0.2782193958664546],
    [0.41128370783672397, 0.28616852146263894],
    [0.48620548236509276, 0.33704292527821933],
    [0.5260599677984461, 0.3656597774244832],
    [0.5659169848004617, 0.39586645468998394],
    [0.5786836855589197, 0.4133545310015897],
    [0.6233582777232081, 0.46899841017488064],
    [0.6632735208044314, 0.5357710651828297],
    [0.679257845331281, 0.573926868044515],
    [0.6856601824754689, 0.5945945945945945],
    [0.7112391522282866, 0.6581875993640698]],

    [[0.35867011635089563, 0.2448330683624801],
    [0.41604052535112857, 0.27344992050874395],
    [0.46704657073709166, 0.3052464228934816],
    [0.537181148927121, 0.34976152623211443],
    [0.575445809241238, 0.3799682034976152],
    [0.6169204986177632, 0.4260731319554847],
    [0.6488385162982393, 0.47058823529411753],
    [0.6775844784462242, 0.5230524642289347],
    [0.6983661255860583, 0.573926868044515],
    [0.7175579476066549, 0.6263910969793322]],

    [[0.36820400392899466, 0.232114467408585],
    [0.4032662298866869, 0.2511923688394275],
    [0.4415131692201757, 0.2702702702702702],
    [0.4733906818020719, 0.2893481717011127],
    [0.5339533988840846, 0.32273449920508734],
    [0.5913516551395908, 0.36883942766295696],
    [0.6455879821372514, 0.42925278219395846],
    [0.669534090103592, 0.46740858505564375],
    [0.6966927587010012, 0.5230524642289347],
    [0.7270715826354639, 0.600953895071542]],

    [[0.37295828987473767, 0.217806041335453],
    [0.4032409142000748, 0.23529411764705876],
    [0.4319235871315301, 0.24801271860095375],
    [0.4638010997134263, 0.2670906200317964],
    [0.49248883578220415, 0.28298887122416516],
    [0.5371102650046073, 0.3052464228934816],
    [0.6040651929561633, 0.3529411764705881],
    [0.6519169037902646, 0.4038155802861684],
    [0.6806400818202991, 0.44197138314785367],
    [0.6998243091349123, 0.4896661367249602],
    [0.7157985073871174, 0.5214626391096978],
    [0.7381927637641386, 0.5850556438791732]],

    [[0.3872692475165309, 0.20508744038155802],
    [0.44145747470962915, 0.23529411764705876],
    [0.48288912741891377, 0.2543720190779013],
    [0.5562033558474171, 0.29570747217806026],
    [0.5785216651646026, 0.311605723370429],
    [0.6199710388545157, 0.34181240063593],
    [0.6662278614320576, 0.3910969793322733],
    [0.6805843873097526, 0.40699523052464215],
    [0.7077405243385013, 0.4610492845786962],
    [0.730117059734894, 0.5135135135135134],
    [0.7445216854171519, 0.559618441971383]],

    [[0.4047775763774262, 0.20031796502384724],
    [0.44780411734327075, 0.22098569157392678],
    [0.4796664405131996, 0.2305246422893481],
    [0.5035695118122994, 0.24165341812400631],
    [0.5274827093860439, 0.25914149443561196],
    [0.5960198677508528, 0.3004769475357709],
    [0.6661772300588336, 0.35930047694753564],
    [0.6932979251263252, 0.3910969793322733],
    [0.7140618512855308, 0.43084260731319535],
    [0.7316511903435845, 0.4769475357710651],
    [0.7524379006207405, 0.531001589825119]],

    [[0.4382018774113192, 0.19077901430842592],
    [0.4828182434964001, 0.20985691573926868],
    [0.5370039391208368, 0.23847376788553254],
    [0.6103282938239851, 0.28616852146263894],
    [0.6613495286219155, 0.327503974562798],
    [0.6884600974147619, 0.3529411764705881],
    [0.7203806466638991, 0.3990461049284577],
    [0.7395648739785119, 0.44674085850556433],
    [0.7587642907050922, 0.503974562798092]],

    [[0.4891015969135115, 0.1558028616852145],
    [0.4923141575445811, 0.17329093799682016],
    [0.5162425445302927, 0.20031796502384724],
    [0.5369684971595798, 0.21621621621621612],
    [0.5752154364930684, 0.23529411764705876],
    [0.5943490324344576, 0.2511923688394275],
    [0.6039082356991685, 0.2543720190779013],
    [0.6421703644446242, 0.28298887122416516],
    [0.6644937368991319, 0.3020667726550078],
    [0.6788502627768271, 0.31796502384737657],
    [0.6995812785434363, 0.33704292527821933],
    [0.7171275809342499, 0.35612082670906187],
    [0.7362890241309124, 0.3895071542130364],
    [0.7506784604012029, 0.4260731319554847],
    [0.7666830374773423, 0.4769475357710651]],

    [[0.5495908985043492, 0.1430842607313194],
    [0.5352824724312171, 0.1573926868044513],
    [0.5337204945672536, 0.17647058823529393],
    [0.5592260488288963, 0.1939586645468997],
    [0.5958907577491315, 0.2193958664546899],
    [0.6166192419470797, 0.23688394276629565],
    [0.6453145727218412, 0.2575516693163751],
    [0.7027229552519925, 0.31001589825119225],
    [0.733030895263941, 0.3434022257551669],
    [0.7505923870667219, 0.37201907790143074],
    [0.7665716484562493, 0.40699523052464215],
    [0.768196915536743, 0.4276629570747216],
    [0.7793889805879317, 0.45627980922098565]],

    [[0.5703067248589906, 0.15262321144674074],
    [0.5974248883578219, 0.18282988871224148],
    [0.634104786690024, 0.217806041335453],
    [0.6580103895577856, 0.2305246422893481],
    [0.6675898453717861, 0.24642289348171686],
    [0.7218135145261411, 0.29888712241653403],
    [0.7601009589582086, 0.3434022257551669],
    [0.782467368079957, 0.3895071542130364],
    [0.7824952153352303, 0.40699523052464215],
    [0.7968669306248919, 0.43243243243243223]],

    [[0.657934442497949, 0.18282988871224148],
    [0.6802805990704084, 0.21621621621621612],
    [0.6978344961672049, 0.24006359300476943],
    [0.7249526596660354, 0.2702702702702702],
    [0.7584529077597639, 0.30842607313195536],
    [0.7712044191062548, 0.3163751987281397],
    [0.7823737000394924, 0.3306836248012718],
    [0.7967150365052198, 0.33704292527821933],
    [0.8078514070458618, 0.3306836248012718],
    [0.8237395319635854, 0.30842607313195536]],

    [[0.7248336759389598, 0.19554848966613658],
    [0.7137150263789451, 0.21303656597774234],
    [0.7280715522566399, 0.22893481717011122],
    [0.7440254979595553, 0.24801271860095375],
    [0.7552049051674379, 0.2686804451510333],
    [0.7759359209340475, 0.2877583465818758],
    [0.7886849007118768, 0.2941176470588234],
    [0.7998313975271634, 0.2941176470588234],
    [0.8141398236002957, 0.2798092209856914]],

    [[0.7503265723572954, 0.20508744038155802],
    [0.7535441961256868, 0.22575516693163744],
    [0.775867568580195, 0.2448330683624801],
    [0.7981681569167527, 0.24960254372019064]]
    ]

VISp_altitude_contours = [
    [[0.6337579617834401, 0.7615262321144673],
    [0.643312101910829, 0.7440381558028617],
     [0.6656050955414026, 0.7313195548489666]],

    [[0.5891719745222934, 0.7424483306836247],
    [0.6162420382165612, 0.7138314785373608],
    [0.6751592356687905, 0.6820349761526232],
    [0.7022292993630579, 0.6883942766295708]],

    [[0.5541401273885356, 0.7233704292527822],
    [0.5780254777070075, 0.6995230524642289],
    [0.6544585987261153, 0.6518282988871223],
    [0.6863057324840742, 0.6279809220985691],
    [0.7261146496815294, 0.5993640699523052]],

    [[0.5191082802547782, 0.7011128775834659],
    [0.5700636942675166, 0.6629570747217806],
    [0.6082802547770707, 0.6422893481717011],
    [0.6464968152866248, 0.6168521462639109],
    [0.6751592356687905, 0.5866454689984102],
    [0.7197452229299373, 0.5214626391096979],
    [0.7340764331210199, 0.4992050874403815],
    [0.7643312101910835, 0.48171701112877585]],

    [[0.48566878980891737, 0.670906200317965],
    [0.5477707006369434, 0.6343402225755167],
    [0.5843949044585992, 0.6168521462639109],
    [0.6130573248407649, 0.5961844197138315],
    [0.6369426751592369, 0.5739268680445151],
    [0.6671974522293, 0.532591414944356],
    [0.699044585987262, 0.4753577106518283],
    [0.7245222929936315, 0.40858505564387915],
    [0.7452229299363062, 0.35771065182829886],
    [0.7579617834394909, 0.3163751987281398],
    [0.7770700636942678, 0.2925278219395866],
    [0.797770700636943, 0.29729729729729726],
    [0.79140127388535, 0.32591414944356123],
    [0.7977707006369426, 0.34658187599364076],
    [0.7993630573248409, 0.37360890302066774],
    [0.7929936305732488, 0.43879173290938]],

    [[0.45382165605095626, 0.6359300476947536],
    [0.5000000000000009, 0.6168521462639109],
    [0.514331210191084, 0.6073131955484896],
    [0.557324840764331, 0.5866454689984102],
    [0.5923566878980897, 0.5643879173290938],
    [0.6098726114649691, 0.5421303656597773],
    [0.627388535031848, 0.5262321144674085],
    [0.6417197452229306, 0.4992050874403815],
    [0.6544585987261153, 0.48012718600953896],
    [0.6576433121019112, 0.46740858505564387],
    [0.6687898089171984, 0.4403815580286169],
    [0.7006369426751595, 0.3545310015898251],
    [0.7038216560509554, 0.3306836248012719],
    [0.7197452229299368, 0.28775834658187593],
    [0.7388535031847141, 0.2464228934817171],
    [0.7675159235668789, 0.21621621621621623],
    [0.7929936305732483, 0.21462639109697934],
    [0.8121019108280256, 0.22734499205087444],
    [0.8152866242038219, 0.2527821939586645],
    [0.8168789808917194, 0.27503974562798095],
    [0.821656050955414, 0.3068362480127186],
    [0.821656050955414, 0.33863275039745633],
    [0.8343949044586001, 0.3783783783783784],
    [0.8121019108280261, 0.41812400635930047]],

    [[0.4235668789808922, 0.5961844197138315],
    [0.4554140127388546, 0.5834658187599364],
    [0.490445859872612, 0.5691573926868044],
    [0.522292993630574, 0.5548489666136724],
    [0.5716560509554145, 0.5182829888712241],
    [0.5971337579617848, 0.4912559618441972],
    [0.6210191082802554, 0.44356120826709067],
    [0.6337579617834401, 0.41017488076311603],
    [0.6385350318471348, 0.39427662957074716],
    [0.676751592356688, 0.30047694753577103],
    [0.6799363057324843, 0.2782193958664547],
    [0.6878980891719748, 0.2591414944356121],
    [0.6910828025477707, 0.24006359300476954],
    [0.710191082802548, 0.19236883942766292]],

    [[0.4012738853503195, 0.5516693163751987],
    [0.43152866242038224, 0.5389507154213036],
    [0.44426751592356784, 0.5373608903020667],
    [0.4777070063694273, 0.519872813990461],
    [0.490445859872612, 0.5166931637519873],
    [0.514331210191084, 0.4992050874403815],
    [0.5286624203821662, 0.49284578696343395],
    [0.5509554140127397, 0.46899841017488075],
    [0.5668789808917203, 0.44833068362480133],
    [0.5859872611464971, 0.4117647058823529],
    [0.6114649681528661, 0.34817170111287765],
    [0.6321656050955422, 0.3020667726550079],
    [0.6464968152866244, 0.2432432432432433],
    [0.6576433121019107, 0.17965023847376782]],

    [[0.3789808917197459, 0.5103338632750397],
    [0.43152866242038357, 0.4912559618441972],
    [0.48566878980891737, 0.4626391096979332],
    [0.5095541401273893, 0.4372019077901431],
    [0.5286624203821662, 0.41971383147853725],
    [0.563694267515924, 0.35771065182829886],
    [0.5891719745222939, 0.3020667726550079],
    [0.6082802547770707, 0.2448330683624802],
    [0.6114649681528661, 0.2209856915739269],
    [0.6082802547770703, 0.1955484896661367],
    [0.6019108280254781, 0.16693163751987283]],

    [[0.35987261146496907, 0.47217806041335453],
    [0.4076433121019116, 0.453100158982512],
    [0.4522292993630588, 0.4276629570747217],
    [0.4808917197452245, 0.4054054054054054],
    [0.4984076433121034, 0.3863275039745627],
    [0.5191082802547768, 0.3545310015898251],
    [0.547770700636943, 0.29729729729729726],
    [0.5636942675159244, 0.2591414944356121],
    [0.5684713375796182, 0.18918918918918914],
    [0.539808917197452, 0.17329093799682038],
    [0.515923566878981, 0.16534181240063583],
    [0.5000000000000004, 0.15103338632750396]],

    [[0.35031847133758065, 0.4260731319554848],
    [0.3869426751592364, 0.4117647058823529],
    [0.4203821656050968, 0.39586645468998405],
    [0.45222929936305833, 0.37201907790143085],
    [0.47770700636942687, 0.343402225755167],
    [0.4904458598726116, 0.32432432432432434],
    [0.5079617834394905, 0.28457869634340216],
    [0.5175159235668794, 0.2686804451510334],
    [0.5191082802547777, 0.2543720190779014],
    [0.5270700636942682, 0.24006359300476954],
    [0.5191082802547777, 0.19077901430842603],
    [0.49203821656050994, 0.17806041335453093],
    [0.4665605095541405, 0.17488076311605716]],

    [[0.33439490445859965, 0.3783783783783784],
    [0.35987261146496863, 0.37042925278219396],
    [0.37420382165605126, 0.3688394276629571],
    [0.4124203821656054, 0.34817170111287765],
    [0.4235668789808922, 0.33386327503974567],
    [0.45700636942675166, 0.2941176470588235],
    [0.4713375796178352, 0.24165341812400642],
    [0.468152866242038, 0.22734499205087444],
    [0.47133757961783473, 0.20349761526232113],
    [0.43949044585987274, 0.19236883942766292]],

    [[0.33439490445859965, 0.3052464228934817],
    [0.3582802547770707, 0.3147853736089029],
    [0.38375796178344057, 0.30047694753577103],
    [0.38853503184713345, 0.28616852146263905],
    [0.40286624203821697, 0.2718600953895072],
    [0.4156050955414017, 0.24960254372019075],
    [0.4156050955414017, 0.22575516693163755],
    [0.3917197452229302, 0.2082670906200319]],

    [[0.35350318471337605, 0.2655007949125596],
    [0.35668789808917234, 0.2527821939586645],
    [0.35987261146496863, 0.24006359300476954]]
]

# switch everything to right hemisphere
VISp_border = np.array(VISp_border)
VISp_border[:,0] = -VISp_border[:,0]
VISam_border = np.array(VISam_border)
VISam_border[:,0] = -VISam_border[:,0]
VISal_border = np.array(VISal_border)
VISal_border[:,0] = -VISal_border[:,0]
for i in range(len(VISp_azimuth_contours)):
    for j in range(len(VISp_azimuth_contours[i])):
        VISp_azimuth_contours[i][j][0] = -VISp_azimuth_contours[i][j][0]
for i in range(len(VISp_altitude_contours)):
    for j in range(len(VISp_altitude_contours[i])):
        VISp_altitude_contours[i][j][0] = -VISp_altitude_contours[i][j][0]

if __name__ == '__main__':

    # print(find_intersection((1.1,-.1), (0,1), (0,0), -np.pi/100))

    # angles = np.linspace(0, 2*np.pi, 100)
    # centre = find_centre(VISp_border)
    # radii = [get_radius(VISp_border, centre, angle) for angle in angles]
    # plt.plot(angles, radii)
    # plt.show()

    # angles = np.linspace(0, 2*np.pi, 10)
    # for angle in angles:
    #     v = (np.cos(angle), np.sin(angle))
    #     print('{} {}'.format(angle, get_angle(v)))


    # print(get_radius(VISp_border, find_centre(VISp_border), 0))

    # curve = Curve(VISp_altitude_contours[3])
    # print(curve.distance((0.5, 0.5)))
    #
    # print(find_centre(VISp_border))
    # print(find_centre(VISal_border))
    # print(find_centre(VISam_border))

    # for i in range(10000):
    #     point = np.random.rand(2)
    #     if is_inside(VISp_border, point):
    #         plt.scatter(point[0], point[1], color='b')
    #     if is_inside(VISal_border, point):
    #         plt.scatter(point[0], point[1], color='r')
    #     if is_inside(VISam_border, point):
    #         plt.scatter(point[0], point[1], color='g')
    # plt.show()

    # circle = []
    # for angle in np.linspace(0, 2 * np.pi, 30):
    #     circle.append((np.cos(angle), np.sin(angle)))
    #
    # morph = Morph(circle, VISp_border, 2*np.pi)
    #
    # azimuth_field = Field(VISp_border, VISp_azimuth_contours, (-60,60))
    # altitude_field = Field(VISp_border, VISp_altitude_contours, (-40,40))
    #
    # # x_steps = np.linspace(0, 1, 100)
    # # y_steps = np.linspace(0, 1, 100)
    # x_steps = np.linspace(-1, 1, 50)
    # y_steps = np.linspace(-1, 1, 50)
    #
    # azimuth_image = np.zeros((len(x_steps), len(y_steps)))
    # altitude_image = np.zeros((len(x_steps), len(y_steps)))
    # for i in range(len(x_steps)):
    #     print(i)
    #     for j in range(len(y_steps)):
    #         point = (x_steps[i], y_steps[-j-1])
    #         point = morph.map_to_target(point)
    #         azimuth_image[j,i] = azimuth_field.get_value(point)
    #         altitude_image[j,i] = altitude_field.get_value(point)
    #
    # plt.subplot(1,2,1)
    # plt.imshow(azimuth_image)
    # plt.colorbar()
    # plt.subplot(1,2,2)
    # plt.imshow(altitude_image)
    # plt.colorbar()
    # plt.show()

    vr = VoxelRetinotopy()
    p = vr.positions[100,:]
    print(vr.get_retinal_coords(p))
    print(vr.get_retinal_coords([-10, -10, -10]))
    # vr.plot()
